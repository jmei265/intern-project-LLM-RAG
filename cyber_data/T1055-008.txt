MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseProcess InjectionPtrace System CallsProcess Injection:Ptrace System CallsOther sub-techniques of Process Injection (12)IDNameT1055.001Dynamic-link Library InjectionT1055.002Portable Executable InjectionT1055.003Thread Execution HijackingT1055.004Asynchronous Procedure CallT1055.005Thread Local StorageT1055.008Ptrace System CallsT1055.009Proc MemoryT1055.011Extra Window Memory InjectionT1055.012Process HollowingT1055.013Process DoppelgängingT1055.014VDSO HijackingT1055.015ListPlantingAdversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1]Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex:malloc) then invoking that memory withPTRACE_SETREGSto set the register containing the next instruction to execute. Ptrace system call injection can also be done withPTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction).[1][2]Ptrace system call injection may not be possible targeting processes that are non-child processes and/or have higher-privileges.[3]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.ID:T1055.008Sub-technique of:T1055ⓘTactics:Defense Evasion,Privilege EscalationⓘPlatforms:LinuxⓘDefense Bypassed:Anti-virus, Application controlVersion:1.1Created:14 January 2020Last Modified:18 October 2021Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS1109PACEMAKERPACEMAKERcan use PTRACE to attach to a targeted process to read process memory.[4]MitigationsIDMitigationDescriptionM1040Behavior Prevention on EndpointSome endpoint security solutions can be configured to block some types of process injection based on common sequences of behavior that occur during the injection process.M1026Privileged Account ManagementUtilize Yama (ex: /proc/sys/kernel/yama/ptrace_scope) to mitigate ptrace based process injection by restricting the use of ptrace to privileged users only. Other mitigation controls involve the deployment of security kernel modules that provide advanced access control and process restrictions such as SELinux, grsecurity, and AppArmor.DetectionIDData SourceData ComponentDetectsDS0009ProcessOS API ExecutionMonitoring for Linux specific calls such as the ptrace system call should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.[5][6][7][8]Process AccessMonitor for processes being viewed that may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges.Process ModificationMonitor for changes made to processes that may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges.ReferencesKerrisk, M. (2020, February 9). PTRACE(2) - Linux Programmer's Manual. Retrieved February 21, 2020.Jain, S. (2018, July 25). Code injection in running process using ptrace. Retrieved February 21, 2020.Colgan, T. (2015, August 15). Linux-Inject. Retrieved February 21, 2020.Perez, D. et al. (2021, April 20). Check Your Pulse: Suspected APT Actors Leverage Authentication Bypass Techniques and Pulse Secure Zero-Day. Retrieved February 5, 2024.Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.