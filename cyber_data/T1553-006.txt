MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseSubvert Trust ControlsCode Signing Policy ModificationSubvert Trust Controls:Code Signing Policy ModificationOther sub-techniques of Subvert Trust Controls (6)IDNameT1553.001Gatekeeper BypassT1553.002Code SigningT1553.003SIP and Trust Provider HijackingT1553.004Install Root CertificateT1553.005Mark-of-the-Web BypassT1553.006Code Signing Policy ModificationAdversaries may modify code signing policies to enable execution of unsigned or self-signed code. Code signing provides a level of authenticity on a program from a developer and a guarantee that the program has not been tampered with. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on an operating system.Some of these security controls may be enabled by default, such as Driver Signature Enforcement (DSE) on Windows or System Integrity Protection (SIP) on macOS.[1][2]Other such controls may be disabled by default but are configurable through application controls, such as only allowing signed Dynamic-Link Libraries (DLLs) to execute on a system. Since it can be useful for developers to modify default signature enforcement policies during the development and testing of applications, disabling of these features may be possible with elevated permissions.[3][2]Adversaries may modify code signing policies in a number of ways, including through use of command-line or GUI utilities,Modify Registry, rebooting the computer in a debug/recovery mode, or by altering the value of variables in kernel memory.[4][2][5][6]Examples of commands that can modify the code signing policy of a system includebcdedit.exe -set TESTSIGNING ONon Windows andcsrutil disableon macOS.[4][2]Depending on the implementation, successful modification of a signing policy may require reboot of the compromised system. Additionally, some implementations can introduce visible artifacts for the user (ex: a watermark in the corner of the screen stating the system is in Test Mode). Adversaries may attempt to remove such artifacts.[7]To gain access to kernel memory to modify variables related to signature checks, such as modifyingg_CiOptionsto disable Driver Signature Enforcement, adversaries may conductExploitation for Privilege Escalationusing a signed, but vulnerable driver.[8][6]ID:T1553.006Sub-technique of:T1553ⓘTactic:Defense EvasionⓘPlatforms:Windows, macOSⓘDefense Bypassed:Application Control, Digital Certificate Validation, User Mode Signature ValidationContributors:Abel Morales, ExabeamVersion:1.0Created:23 April 2021Last Modified:05 May 2022Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionG0087APT39APT39has used malware to turn off theRequireSignedfeature which ensures only signed DLLs can be run on Windows.[9]S0089BlackEnergyBlackEnergyhas enabled theTESTSIGNINGboot configuration option to facilitate loading of a driver component.[7]S0009HikitHikithas attempted to disable driver signing verification by tampering with several Registry keys prior to the loading of a rootkit driver component.[5]S0664PandoraPandoracan use CVE-2017-15303 to disable Windows Driver Signature Enforcement (DSE) protection and load its driver.[10]G0010TurlaTurlahas modified variables in kernel memory to turn off Driver Signature Enforcement after exploiting vulnerabilities that obtained kernel mode privileges.[8][6]MitigationsIDMitigationDescriptionM1046Boot IntegrityUse of Secure Boot may prevent some implementations of modification to code signing policies.[4]M1026Privileged Account ManagementLimit the usage of local administrator and domain administrator accounts to be used for day-to-day operations that may expose them to potential adversaries.M1024Restrict Registry PermissionsEnsure proper permissions are set for the Registry to prevent users from modifying keys related to code signing policies.DetectionIDData SourceData ComponentDetectsDS0017CommandCommand ExecutionMonitor for the execution of commands that could modify the code signing policy of a system, such asbcdedit.exe -set TESTSIGNING ON.[4]DS0009ProcessProcess CreationMonitor processes and command-line arguments for actions that could be taken to modify the code signing policy of a system, such asbcdedit.exe -set TESTSIGNING ON.[4]DS0024Windows RegistryWindows Registry Key ModificationConsider monitoring for modifications made to Registry keys associated with code signing policies, such asHKCU\Software\Policies\Microsoft\Windows NT\Driver Signing. Modifications to the code signing policy of a system are likely to be rare.ReferencesMicrosoft. (2017, June 1). Digital Signatures for Kernel Modules on Windows. Retrieved April 22, 2021.Apple. (n.d.). Disabling and Enabling System Integrity Protection. Retrieved April 22, 2021.Microsoft. (2017, April 20). Installing an Unsigned Driver during Development and Test. Retrieved April 22, 2021.Microsoft. (2021, February 15). Enable Loading of Test Signed Drivers. Retrieved April 22, 2021.Glyer, C., Kazanciyan, R. (2012, August 22). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 2). Retrieved May 4, 2020.TDL Project. (2016, February 4). TDL (Turla Driver Loader). Retrieved April 22, 2021.F-Secure Labs. (2014). BlackEnergy & Quedagh: The convergence of crimeware and APT attacks. Retrieved March 24, 2016.Reichel, D. and Idrizovic, E. (2020, June 17). AcidBox: Rare Malware Repurposing Turla Group Exploit Targeted Russian Organizations. Retrieved March 16, 2021.FBI. (2020, September 17). Indicators of Compromise Associated with Rana Intelligence Computing, also known as Advanced Persistent Threat 39, Chafer, Cadelspy, Remexi, and ITG07. Retrieved December 10, 2020.Lunghi, D. and Lu, K. (2021, April 9). Iron Tiger APT Updates Toolkit With Evolved SysUpdate Malware. Retrieved November 12, 2021.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.