MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseHijack Execution FlowDynamic Linker HijackingHijack Execution Flow:Dynamic Linker HijackingOther sub-techniques of Hijack Execution Flow (13)IDNameT1574.001DLL Search Order HijackingT1574.002DLL Side-LoadingT1574.004Dylib HijackingT1574.005Executable Installer File Permissions WeaknessT1574.006Dynamic Linker HijackingT1574.007Path Interception by PATH Environment VariableT1574.008Path Interception by Search Order HijackingT1574.009Path Interception by Unquoted PathT1574.010Services File Permissions WeaknessT1574.011Services Registry Permissions WeaknessT1574.012COR_PROFILERT1574.013KernelCallbackTableT1574.014AppDomainManagerAdversaries may execute their own malicious payloads by hijacking environment variables the dynamic linker uses to load shared libraries. During the execution preparation phase of a program, the dynamic linker loads specified absolute paths of shared libraries from environment variables and files, such asLD_PRELOADon Linux orDYLD_INSERT_LIBRARIESon macOS. Libraries specified in environment variables are loaded first, taking precedence over system libraries with the same function name.[1][2][3]These variables are often used by developers to debug binaries without needing to recompile, deconflict mapped symbols, and implement custom functions without changing the original library.[4]On Linux and macOS, hijacking dynamic linker variables may grant access to the victim process's memory, system/network resources, and possibly elevated privileges. This method may also evade detection from security products since the execution is masked under a legitimate process. Adversaries can set environment variables via the command line using theexportcommand,setenvfunction, orputenvfunction. Adversaries can also leverageDynamic Linker Hijackingto export variables in a shell or set variables programmatically using higher level syntax such Python’sos.environ.On Linux, adversaries may setLD_PRELOADto point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary's malicious code upon execution of the victim program.LD_PRELOADcan be set via the environment variable or/etc/ld.so.preloadfile.[1][2]Libraries specified byLD_PRELOADare loaded and mapped into memory bydlopen()andmmap()respectively.[5][6][7][8]On macOS this behavior is conceptually the same as on Linux, differing only in how the macOS dynamic libraries (dyld) is implemented at a lower level. Adversaries can set theDYLD_INSERT_LIBRARIESenvironment variable to point to malicious libraries containing names of legitimate libraries or functions requested by a victim program.[9][10][11]ID:T1574.006Sub-technique of:T1574ⓘTactics:Persistence,Privilege Escalation,Defense EvasionⓘPlatforms:Linux, macOSⓘPermissions Required:UserVersion:2.0Created:13 March 2020Last Modified:30 March 2023Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionG0096APT41APT41has configured payloads to load via LD_PRELOAD.[12]S1105COATHANGERCOATHANGERcopies the malicious file/data2/.bd.key/preload.soto/lib/preload.so, then launches a child process that executes the malicious file/data2/.bd.key/authdas/bin/authdwith the arguments/lib/preload.so reboot newreboot 1.[13]This injects the malicious preload.so file into the process with PID 1, and replaces its reboot function with the malicious newreboot function for persistence.S0377EburyEburyhas injected its dynamic library into descendent processes of sshd via LD_PRELOAD.[14]S0394HiddenWaspHiddenWaspadds itself as a shared object to the LD_PRELOAD environment variable.[15]S0601HildegardHildegardhas modified /etc/ld.so.preload to intercept shared library import functions.[16]G0106RockeRockehas modified /etc/ld.so.preload to hook libc functions in order to hide the installed dropper and mining software in process lists.[17]S0658XCSSETXCSSETadds malicious file paths to theDYLD_FRAMEWORK_PATHandDYLD_LIBRARY_PATHenvironment variables to execute malicious code.[18]MitigationsIDMitigationDescriptionM1038Execution PreventionAdversaries may use new payloads to execute this technique. Identify and block potentially malicious software executed through hijacking by using application control solutions also capable of blocking libraries loaded by legitimate software.M1028Operating System ConfigurationWhen System Integrity Protection (SIP) is enabled in macOS, the aforementioned environment variables are ignored when executing protected binaries. Third-party applications can also leverage Apple’s Hardened Runtime, ensuring these environment variables are subject to imposed restrictions.[19]Admins can add restrictions to applications by setting the setuid and/or setgid bits, use entitlements, or have a __RESTRICT segment in the Mach-O binary.DetectionIDData SourceData ComponentDetectsDS0017CommandCommand ExecutionMonitor executed commands and arguments associated with modifications to variables and files associated with loading shared libraries such as LD_PRELOAD on Linux and DYLD_INSERT_LIBRARIES on macOS.DS0022FileFile CreationMonitor for newly constructed files that are added to absolute paths of shared libraries such as LD_PRELOAD on Linux and DYLD_INSERT_LIBRARIES on macOS.File ModificationMonitor for changes to environment variables and files associated with loading shared libraries such as LD_PRELOAD on Linux and DYLD_INSERT_LIBRARIES on macOS.DS0011ModuleModule LoadMonitor library metadata, such as a hash, and compare libraries that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.DS0009ProcessProcess CreationMonitor for newly executed processes for unusual activity (e.g., a process that does not use the network begins to do so).ReferencesKerrisk, M. (2020, June 13). Linux Programmer's Manual. Retrieved June 15, 2020.The Linux Documentation Project. (n.d.). Shared Libraries. Retrieved January 31, 2020.Apple Inc.. (2012, July 23). Overview of Dynamic Libraries. Retrieved March 24, 2021.baeldung. (2020, August 9). What Is the LD_PRELOAD Trick?. Retrieved March 24, 2021.Itamar Turner-Trauring. (2017, April 18). “This will only hurt for a moment”: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.Tim Brown. (2011, June 29). Breaking the links: Exploiting the linker. Retrieved March 29, 2021.Fitzl, C. (2019, July 9). DYLD_INSERT_LIBRARIES DYLIB injection in macOS / OSX. Retrieved March 26, 2020.Timac. (2012, December 18). Simple code injection using DYLD_INSERT_LIBRARIES. Retrieved March 26, 2020.Jon Gabilondo. (2019, September 22). How to Inject Code into Mach-O Apps. Part II.. Retrieved March 24, 2021.Crowdstrike. (2020, March 2). 2020 Global Threat Report. Retrieved December 11, 2020.Dutch Military Intelligence and Security Service (MIVD) & Dutch General Intelligence and Security Service (AIVD). (2024, February 6). Ministry of Defense of the Netherlands uncovers COATHANGER, a stealthy Chinese FortiGate RAT. Retrieved February 7, 2024.Vachon, F. (2017, October 30). Windigo Still not Windigone: An Ebury Update . Retrieved February 10, 2021.Sanmillan, I. (2019, May 29). HiddenWasp Malware Stings Targeted Linux Systems. Retrieved June 24, 2019.Chen, J. et al. (2021, February 3). Hildegard: New TeamTNT Cryptojacking Malware Targeting Kubernetes. Retrieved April 5, 2021.Anomali Labs. (2019, March 15). Rocke Evolves Its Arsenal With a New Malware Family Written in Golang. Retrieved April 24, 2019.Mac Threat Response, Mobile Research Team. (2020, August 13). The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits. Retrieved October 5, 2021.Apple Inc.. (2021, January 1). Hardened Runtime: Manage security protections and resource access for your macOS apps.. Retrieved March 24, 2021.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.