MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseDebugger EvasionDebugger EvasionAdversaries may employ various means to detect and avoid debuggers. Debuggers are typically used by defenders to trace and/or analyze the execution of potential malware payloads.[1]Debugger evasion may include changing behaviors based on the results of the checks for the presence of artifacts indicative of a debugged environment. Similar toVirtualization/Sandbox Evasion, if the adversary detects a debugger, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for debugger artifacts before dropping secondary or additional payloads.Specific checks will vary based on the target and/or adversary, but may involveNative APIfunction calls such asIsDebuggerPresent()andNtQueryInformationProcess(), or manually checking theBeingDebuggedflag of the Process Environment Block (PEB). Other checks for debugging artifacts may also seek to enumerate hardware breakpoints, interrupt assembly opcodes, time checks, or measurements if exceptions are raised in the current process (assuming a present debugger would "swallow" or handle the potential error).[2][3][4]Adversaries may use the information learned from these debugger checks during automated discovery to shape follow-on behaviors. Debuggers can also be evaded by detaching the process or flooding debug logs with meaningless data via messages produced by loopingNative APIfunction calls such asOutputDebugStringW().[5][6]ID:T1622Sub-techniques:No sub-techniquesⓘTactics:Defense Evasion,DiscoveryⓘPlatforms:Linux, Windows, macOSContributors:TruKnoVersion:1.0Created:01 April 2022Last Modified:16 April 2022Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS1087AsyncRATAsyncRATcan use theCheckRemoteDebuggerPresentfunction to detect the presence of a debugger.[7]S1070Black BastaTheBlack Bastadropper can check system flags, CPU registers, CPU instructions, process timing, system libraries, and APIs to determine if a debugger is present.[8]S1039BumblebeeBumblebeecan search for tools used in static analysis.[9]S1111DarkGateDarkGatechecks theBeingDebuggedflag in the PEB structure during execution to identify if the malware is being debugged.[10]S1066DarkTortillaDarkTortillacan detect debuggers by using functions such asDebuggerIsAttachedandDebuggerIsLogging.DarkTortillacan also detect profilers by verifying theCOR_ENABLE_PROFILINGenvironment variable is present and active.[11]S0694DRATzarusDRATzaruscan useIsDebuggerPresentto detect whether a debugger is present on a victim.[12]S1060MafaldaMafaldacan search for debugging tools on a compromised host.[13]C0022Operation Dream JobDuringOperation Dream Job,Lazarus Groupused tools that used theIsDebuggerPresentcall to detect debuggers.[12]S0240ROKRATROKRATcan check for debugging tools.[14][15][16]S1018Saint BotSaint Bothas usedis_debugger_presentas part of its environmental checks.[17]S0595ThiefQuestThiefQuestuses a function namedis_debuggingto perform anti-debugging logic. The function invokessysctlchecking the returned value ofP_TRACED.ThiefQuestalso callsptracewith thePTRACE_DENY_ATTACHflag to prevent debugging.[5]MitigationsThis type of attack technique cannot be easily mitigated with preventive controls since
                                    it is based on the abuse of system features.DetectionIDData SourceData ComponentDetectsDS0015Application LogApplication Log ContentMonitor debugger logs for signs of abnormal and potentially malicious activity.DS0017CommandCommand ExecutionMonitor executed commands and arguments that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required.DS0009ProcessOS API ExecutionMonitor for API calls (such asIsDebuggerPresent()) that may employ various means to detect and avoid debugged environments. Detecting actions related to debugger identification may be difficult depending on the adversary's implementation and monitoring required.Process CreationMonitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection. Debugger related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.ReferencesProcessHacker. (2009, October 27). Process Hacker. Retrieved April 11, 2022.hasherezade. (2021, June 30). Module 3 - Understanding and countering malware's evasion and self-defence. Retrieved April 1, 2022.Noteworthy. (2019, January 6). Al-Khaser. Retrieved April 1, 2022.vxunderground. (2021, June 30). VX-API. Retrieved April 1, 2022.Patrick Wardle. (2020, July 3). OSX.EvilQuest Uncovered part ii: insidious capabilities. Retrieved March 21, 2021.Check Point Research. (2021, January 4). Stopping Serial Killer: Catching the Next Strike. Retrieved September 7, 2021.Jornet, A. (2021, December 23). Snip3, an investigation into malware. Retrieved September 19, 2023.Check Point. (2022, October 20). BLACK BASTA AND THE UNNOTICED DELIVERY. Retrieved March 8, 2023.Salem, A. (2022, April 27). The chronicles of Bumblebee: The Hook, the Bee, and the Trickbot connection. Retrieved September 2, 2022.Ernesto Fernández Provecho, Pham Duy Phuc, Ciana Driscoll & Vinoo Thomas. (2023, November 21). The Continued Evolution of the DarkGate Malware-as-a-Service. Retrieved February 9, 2024.Secureworks Counter Threat Unit Research Team. (2022, August 17). DarkTortilla Malware Analysis. Retrieved November 3, 2022.ClearSky Research Team. (2020, August 13). Operation 'Dream Job' Widespread North Korean Espionage Campaign. Retrieved December 20, 2021.SentinelLabs. (2022, September 22). Metador Technical Appendix. Retrieved April 4, 2023.Mercer, W., Rascagneres, P. (2018, January 16). Korea In The Crosshairs. Retrieved May 21, 2018.Pantazopoulos, N.. (2018, November 8). RokRat Analysis. Retrieved May 21, 2020.Jazi, Hossein. (2021, January 6). Retrohunting APT37: North Korean APT used VBA self decode technique to inject RokRat. Retrieved March 22, 2022.Hasherezade. (2021, April 6). A deep dive into Saint Bot, a new downloader. Retrieved June 9, 2022.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.