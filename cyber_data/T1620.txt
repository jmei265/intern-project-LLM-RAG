MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseReflective Code LoadingReflective Code LoadingAdversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk (e.g.,Shared Modules).Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).[1][2][3][4][5]For example, theAssembly.Load()method executed byPowerShellmay be abused to load raw code into the running process.[6]Reflective code injection is very similar toProcess Injectionexcept that the "injection" loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.[3][4][7][8]ID:T1620Sub-techniques:No sub-techniquesⓘTactic:Defense EvasionⓘPlatforms:Linux, Windows, macOSⓘDefense Bypassed:Anti-virus, Application controlContributors:Jiraput Thamsongkrah; Joas Antonio dos Santos, @C0d3Cr4zy, Inmetrics; João Paulo de A. Filho, @Hug1nN__; Lior Ribak, SentinelOne; Rex Guo, @Xiaofei_REX, Confluera; Shlomi Salem, SentinelOneVersion:1.2Created:05 October 2021Last Modified:09 February 2024Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS1081BADHATCHBADHATCHcan copy a large byte array of 64-bit shellcode into process memory and execute it with a call toCreateThread.[9]S1063Brute Ratel C4Brute Ratel C4has used reflective loading to execute malicious DLLs.[10]S0154Cobalt StrikeCobalt Strike'sexecute-assemblycommand can run a .NET executable within the memory of a sacrificial process by loading the CLR.[11]S0625CubaCubaloaded the payload into memory using PowerShell.[12]S0695DonutDonutcan generate code modules that enable in-memory execution of VBScript, JScript, EXE, DLL, and dotNET payloads.[13]S0367EmotetEmotethas reflectively loaded payloads into memory.[14]S0661FoggyWebFoggyWeb's loader has reflectively loaded .NET-based assembly/payloads into memory.[15]S0666GelsemiumGelsemiumcan use custom shellcode to map embedded DLLs into memory.[16]S1022IceAppleIceApplecan use reflective code loading to load .NET assemblies intoMSExchangeOWAAppPoolon targeted Exchange servers.[17]G0032Lazarus GroupLazarus Grouphas changed memory protection permissions then overwritten in memory DLL function code with shellcode, which was later executed viaKernelCallbackTablehijacking.Lazarus Grouphas also used shellcode within macros to decrypt and manually map DLLs into memory at runtime.[18][19]S0447LokibotLokibothas reflectively loaded the decoded DLL into memory.[20]S1059metaMainmetaMainhas reflectively loaded a DLL to read, decrypt, and load an orchestrator file.[21]S0194PowerSploitPowerSploitreflectively loads a Windows PE file into a process.[22][23]S1085SardonicSardonichas a plugin system that can load specially made DLLs into memory and execute their functions.[24][25]S0595ThiefQuestThiefQuestuses various API functions such asNSCreateObjectFileImageFromMemoryto load and link in-memory payloads.[26]S0022UroburosUroburoshas the ability to load new modules directly into memory using itsLoad Modules Memcommand.[27]S0689WhisperGateWhisperGate's downloader can reverse its third stage file bytes and reflectively load the file as a .NET assembly.[28]MitigationsThis type of attack technique cannot be easily mitigated with preventive controls since
                                    it is based on the abuse of system features.DetectionIDData SourceData ComponentDetectsDS0011ModuleModule LoadMonitor for artifacts of abnormal process execution. For example, a common signature related to reflective code loading on Windows is mechanisms related to the .NET Common Language Runtime (CLR) -- such as mscor.dll, mscoree.dll, and clr.dll -- loading into abnormal processes (such as notepad.exe)DS0009ProcessOS API ExecutionMonitor for code artifacts associated with reflectively loading code, such as the abuse of .NET functions such asAssembly.Load()andNative APIfunctions such asCreateThread(),memfd_create(),execve(), and/orexecveat().[4][8]DS0012ScriptScript ExecutionSimilarly, AMSI / ETW traces can be used to identify signs of arbitrary code execution from within the memory of potentially compromised processes.[29][1]ReferencesThe Wover. (2019, May 9). Donut - Injecting .NET Assemblies as Shellcode. Retrieved October 4, 2021.Bunce, D. (2019, October 31). Building A Custom Tool For Shellcode Analysis. Retrieved October 4, 2021.Stuart. (2018, March 31). In-Memory-Only ELF Execution (Without tmpfs). Retrieved October 4, 2021.0x00pico. (2017, September 25). Super-Stealthy Droppers. Retrieved October 4, 2021.Kirk, N. (2018, June 18). Bring Your Own Land (BYOL) – A Novel Red Teaming Technique. Retrieved October 4, 2021.Microsoft. (n.d.). Assembly.Load Method. Retrieved February 9, 2024.Sanmillan, I. (2019, November 18). ACBackdoor: Analysis of a New Multiplatform Backdoor. Retrieved October 4, 2021.Landry, J. (2016, April 21). Teaching an old RAT new tricks. Retrieved October 4, 2021.Savelesky, K., et al. (2019, July 23). ABADBABE 8BADFOOD: Discovering BADHATCH and a Detailed Look at FIN8's Tooling. Retrieved September 8, 2021.Chell, D.  PART 3: How I Met Your Beacon – Brute Ratel. Retrieved February 6, 2023.Strategic Cyber LLC. (2020, November 5). Cobalt Strike: Advanced Threat Tactics for Penetration Testers. Retrieved April 13, 2021.Roccio, T., et al. (2021, April). Technical Analysis of Cuba Ransomware. Retrieved June 18, 2021.TheWover. (2019, May 9). donut. Retrieved March 25, 2022.Binary Defense. (n.d.). Emotet Evolves With new Wi-Fi Spreader. Retrieved September 8, 2023.Ramin Nafisi. (2021, September 27). FoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor. Retrieved October 4, 2021.Dupuy, T. and Faou, M. (2021, June). Gelsemium. Retrieved November 30, 2021.CrowdStrike. (2022, May). ICEAPPLE: A NOVEL INTERNET INFORMATION SERVICES (IIS) POST-EXPLOITATION FRAMEWORK. Retrieved June 27, 2022.Saini, A. and Hossein, J. (2022, January 27). North Korea’s Lazarus APT leverages Windows Update client, GitHub in latest campaign. Retrieved January 27, 2022.Pradhan, A. (2022, February 8). LolZarus: Lazarus Group Incorporating Lolbins into Campaigns. Retrieved March 22, 2022.Muhammad, I., Unterbrink, H.. (2021, January 6). A Deep Dive into Lokibot Infection Chain. Retrieved August 31, 2021.Ehrlich, A., et al. (2022, September). THE MYSTERY OF METADOR | AN UNATTRIBUTED THREAT HIDING IN TELCOS, ISPS, AND UNIVERSITIES. Retrieved January 23, 2023.PowerShellMafia. (2012, May 26). PowerSploit - A PowerShell Post-Exploitation Framework. Retrieved February 6, 2018.PowerSploit. (n.d.). PowerSploit. Retrieved February 6, 2018.Budaca, E., et al. (2021, August 25). FIN8 Threat Actor Goes Agile with New Sardonic Backdoor. Retrieved August 9, 2023.Symantec Threat Hunter Team. (2023, July 18). FIN8 Uses Revamped Sardonic Backdoor to Deliver Noberus Ransomware. Retrieved August 9, 2023.Patrick Wardle. (2020, July 3). OSX.EvilQuest Uncovered part ii: insidious capabilities. Retrieved March 21, 2021.FBI et al. (2023, May 9). Hunting Russian Intelligence “Snake” Malware. Retrieved June 8, 2023.Insikt Group. (2020, January 28). WhisperGate Malware Corrupts Computers in Ukraine. Retrieved March 31, 2023.MDSec Research. (n.d.). Detecting and Advancing In-Memory .NET Tradecraft. Retrieved October 4, 2021.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.