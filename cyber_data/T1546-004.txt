MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseEvent Triggered ExecutionUnix Shell Configuration ModificationEvent Triggered Execution:Unix Shell Configuration ModificationOther sub-techniques of Event Triggered Execution (16)IDNameT1546.001Change Default File AssociationT1546.002ScreensaverT1546.003Windows Management Instrumentation Event SubscriptionT1546.004Unix Shell Configuration ModificationT1546.005TrapT1546.006LC_LOAD_DYLIB AdditionT1546.007Netsh Helper DLLT1546.008Accessibility FeaturesT1546.009AppCert DLLsT1546.010AppInit DLLsT1546.011Application ShimmingT1546.012Image File Execution Options InjectionT1546.013PowerShell ProfileT1546.014EmondT1546.015Component Object Model HijackingT1546.016Installer PackagesAdversaries may establish persistence through executing malicious commands triggered by a user’s shell. UserUnix Shells execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user’s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user’s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately.Adversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the/etc/profileand/etc/profile.dfiles.[1][2]These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into~/.bash_profile,~/.bash_login, or~/.profilewhich are sourced when a user opens a command-line interface or connects remotely.[3][4]Since the system only executes the first existing file in the listed order, adversaries have used~/.bash_profileto ensure execution. Adversaries have also leveraged the~/.bashrcfile which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.[5][3][6][7]Some malware targets the termination of a program to trigger execution, adversaries can use the~/.bash_logoutfile to execute malicious commands at the end of a session.For macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using/etc/profile,/etc/zshenv,/etc/zprofile, and/etc/zlogin.[8][9][10][11]The login shell then configures the user environment with~/.zprofileand~/.zlogin. The interactive shell uses the~/.zshrcto configure the user environment. Upon exiting,/etc/zlogoutand~/.zlogoutare executed. For legacy programs, macOS executes/etc/bashrcon startup.ID:T1546.004Sub-technique of:T1546ⓘTactics:Privilege Escalation,PersistenceⓘPlatforms:Linux, macOSⓘPermissions Required:Administrator, UserContributors:Robert Wilson; Tony Lambert, Red CanaryVersion:2.1Created:24 January 2020Last Modified:20 August 2021Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS0690Green LambertGreen Lambertcan establish persistence on a compromised host through modifying theprofile,login, and run command (rc) files associated with thebash,csh, andtcshshells.[12][13]S0362Linux RabbitLinux Rabbitmaintains persistence on an infected machine through rc.local and .bashrc files.[14]S1078RotaJakiroWhen executing with non-root level permissions,RotaJakirocan install persistence by adding a command to the .bashrc file that executes a binary in the${HOME}/.gvfsd/.profile/folder.[15]MitigationsIDMitigationDescriptionM1022Restrict File and Directory PermissionsMaking these files immutable and only changeable by certain administrators will limit the ability for adversaries to easily create user level persistence.DetectionIDData SourceData ComponentDetectsDS0017CommandCommand ExecutionMonitor executed commands and arguments that may establish persistence through executing malicious commands triggered by a user’s shell.DS0022FileFile CreationMonitor for newly constructed files that may establish persistence through executing malicious commands triggered by a user’s shell. For most Linux and macOS systems, a list of file paths for valid shell options available on a system are located in the/etc/shellsfile.File ModificationMonitor for changes to/etc/profileand/etc/profile.d, these files should only be modified by system administrators. MacOS users can leverage Endpoint Security Framework file events monitoring these specific files.[16]DS0009ProcessProcess CreationMonitor newly executed processes that may establish persistence through executing malicious commands triggered by a user’s shell.ReferencesPaul Litvak. (2020, May 4). Kaiji: New Chinese Linux malware turning to Golang. Retrieved December 17, 2020.Benjamin Cane. (2013, September 16). Understanding a little more about /etc/profile and /etc/bashrc. Retrieved February 25, 2021.Anomali Threat Research. (2019, October 15). Illicit Cryptomining Threat Actor Rocke Changes Tactics, Now More Difficult to Detect. Retrieved December 17, 2020.ArchWiki. (2021, January 19). Bash. Retrieved February 25, 2021.Claud Xiao and Cong Zheng. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved December 17, 2020.Anomali Threat Research. (2018, December 6). Pulling Linux Rabbit/Rabbot Malware Out of a Hat. Retrieved December 17, 2020.Cesar Anjos. (2018, May 31). Shell Logins as a Magento Reinfection Vector. Retrieved December 17, 2020.Armin Briegel. (2019, June 5). Moving to zsh, part 2: Configuration Files. Retrieved February 25, 2021.Leo Pitt. (2020, August 6). Persistent JXA - A poor man's Powershell for macOS. Retrieved January 11, 2021.Leo Pitt. (2020, November 11). Github - PersistentJXA/BashProfilePersist.js. Retrieved January 11, 2021.Cedric Owens. (2021, May 22). macOS MS Office Sandbox Brain Dump. Retrieved August 20, 2021.Sandvik, Runa. (2021, October 1). Made In America: Green Lambert for OS X. Retrieved March 21, 2022.Sandvik, Runa. (2021, October 18). Green Lambert and ATT&CK. Retrieved March 21, 2022.Anomali Labs. (2018, December 6). Pulling Linux Rabbit/Rabbot Malware Out of a Hat. Retrieved March 4, 2019.Alex Turing, Hui Wang. (2021, April 28). RotaJakiro: A long live secret backdoor with 0 VT detection. Retrieved June 14, 2023.Patrick Wardle. (2019, September 17). Writing a File Monitor with Apple's Endpoint Security Framework. Retrieved December 17, 2020.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.