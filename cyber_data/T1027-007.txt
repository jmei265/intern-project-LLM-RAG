MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseObfuscated Files or InformationDynamic API ResolutionObfuscated Files or Information:Dynamic API ResolutionOther sub-techniques of Obfuscated Files or Information (13)IDNameT1027.001Binary PaddingT1027.002Software PackingT1027.003SteganographyT1027.004Compile After DeliveryT1027.005Indicator Removal from ToolsT1027.006HTML SmugglingT1027.007Dynamic API ResolutionT1027.008Stripped PayloadsT1027.009Embedded PayloadsT1027.010Command ObfuscationT1027.011Fileless StorageT1027.012LNK Icon SmugglingT1027.013Encrypted/Encoded FileAdversaries may obfuscate then dynamically resolve API functions called by their malware in order to conceal malicious functionalities and impair defensive analysis. Malware commonly uses variousNative APIfunctions provided by the OS to perform various tasks such as those involving processes, files, and other system artifacts.API functions called by malware may leave static artifacts such as strings in payload files. Defensive analysts may also uncover which functions a binary file may execute via an import address table (IAT) or other structures that help dynamically link calling code to the shared modules that provide functions.[1][2]To avoid static or other defensive analysis, adversaries may use dynamic API resolution to conceal malware characteristics and functionalities. Similar toSoftware Packing, dynamic API resolution may change file signatures and obfuscate malicious API function calls until they are resolved and invoked during runtime.Various methods may be used to obfuscate malware calls to API functions. For example, hashes of function names are commonly stored in malware in lieu of literal strings. Malware can use these hashes (or other identifiers) to manually reproduce the linking and loading process using functions such asGetProcAddress()andLoadLibrary(). These hashes/identifiers can also be further obfuscated using encryption or other string manipulation tricks (requiring various forms ofDeobfuscate/Decode Files or Informationduring execution).[3][4][1]ID:T1027.007Sub-technique of:T1027ⓘTactic:Defense EvasionⓘPlatforms:WindowsVersion:1.0Created:22 August 2022Last Modified:23 August 2022Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS1053AvosLockerAvosLockerhas used obfuscated API calls that are retrieved by their checksums.[5]S0534BazarBazarcan hash then resolve API calls at runtime.[6][7]S1063Brute Ratel C4Brute Ratel C4can call and dynamically resolve hashed APIs.[8]G0032Lazarus GroupLazarus Grouphas used a custom hashing method to resolve APIs used in shellcode.[9]S0147PteranodonPteranodoncan use a dynamic Windows hashing algorithm to map API components.[10]S1099SamuraiSamuraican encrypt API name strings with an XOR-based algorithm.[11]MitigationsThis type of attack technique cannot be easily mitigated with preventive controls since
                                    it is based on the abuse of system features.DetectionIDData SourceData ComponentDetectsDS0022FileFile MetadataDepending on the method used to obfuscate API function calls, a file-based signature may be capable of detecting dynamical resolution.[1][3][12]DS0011ModuleModule LoadMonitoring module loads, especially those not explicitly included in import tables, may highlight obfuscated API function calls. Dynamic malware analysis may also expose signs of function obfuscation, such as memory reads that correspond to addresses of API function code within modules.[3]DS0009ProcessOS API ExecutionMonitor and analyze calls to functions such asGetProcAddress()andLoadLibrary()that are associated with dynamically loading API functions.[1]ReferencesBrennan, M. (2022, February 16). Hackers No Hashing: Randomizing API Hashes to Evade Cobalt Strike Shellcode Detection. Retrieved August 22, 2022.spotheplanet. (n.d.). Windows API Hashing in Malware. Retrieved August 22, 2022.Choi, S. (2015, August 6). Obfuscated API Functions in Modern Packers. Retrieved August 22, 2022.drakonia. (2022, August 10). HInvoke and avoiding PInvoke. Retrieved August 22, 2022.Hasherezade. (2021, July 23). AvosLocker enters the ransomware scene, asks for partners. Retrieved January 11, 2023.Cybereason Nocturnus. (2020, July 16). A BAZAR OF TRICKS: FOLLOWING TEAM9’S DEVELOPMENT CYCLES. Retrieved November 18, 2020.Pantazopoulos, N. (2020, June 2). In-depth analysis of the new Team9 malware family. Retrieved December 1, 2020.Harbison, M. and Renals, P. (2022, July 5). When Pentest Tools Go Brutal: Red-Teaming Tool Being Abused by Malicious Actors. Retrieved February 1, 2023.Saini, A. and Hossein, J. (2022, January 27). North Korea’s Lazarus APT leverages Windows Update client, GitHub in latest campaign. Retrieved January 27, 2022.Microsoft Threat Intelligence Center. (2022, February 4). ACTINIUM targets Ukrainian organizations. Retrieved February 18, 2022.Dedola, G. (2022, June 21). APT ToddyCat. Retrieved January 3, 2024.Jason (jxb5151). (2021, January 28). findapihash.py. Retrieved August 22, 2022.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.