MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseVirtualization/Sandbox EvasionTime Based EvasionVirtualization/Sandbox Evasion:Time Based EvasionOther sub-techniques of Virtualization/Sandbox Evasion (3)IDNameT1497.001System ChecksT1497.002User Activity Based ChecksT1497.003Time Based EvasionAdversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include enumerating time-based properties, such as uptime or the system clock, as well as the use of timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex:Scheduled Task/Job). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduledMulti-Stage Channelsto avoid analysis and scrutiny.[1]Benign commands or other operations may also be used to delay malware execution. Loops or otherwise needless repetitions of commands, such asPings, may be used to delay malware execution and potentially exceed time thresholds of automated analysis environments.[2][3]Another variation, commonly referred to as API hammering, involves making various calls toNative APIfunctions in order to delay execution (while also potentially overloading analysis environments with junk data).[4][5]Adversaries may also use time as a metric to detect sandboxes and analysis environments, particularly those that attempt to manipulate time mechanisms to simulate longer elapses of time. For example, an adversary may be able to identify a sandbox accelerating time by sampling and calculating the expected value for an environment's timestamp before and after execution of a sleep function.[6]ID:T1497.003Sub-technique of:T1497ⓘTactics:Defense Evasion,DiscoveryⓘPlatforms:Linux, Windows, macOSⓘDefense Bypassed:Anti-virus, Host forensic analysis, Signature-based detection, Static File AnalysisContributors:Deloitte Threat Library Team; Jeff Felling, Red Canary; Jorge Orchilles, SCYTHE; Ruben Dodge, @shotgunner101Version:1.2Created:06 March 2020Last Modified:15 October 2021Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS0584AppleJeusAppleJeushas waited a specified time before downloading a second stage payload.[7]S0642BADFLICKBADFLICKhas delayed communication to the actor-controlled IP address by 5 minutes.[8]S0534BazarBazarcan use a timer to delay execution of core functionality.[9]S0574BendyBearBendyBearcan check for analysis environments and signs of debugging using the Windows APIkernel32!GetTickCountKernel32call.[10]S0268BisonalBisonalhas checked if the malware is running in a virtual environment with the anti-debug function GetTickCount() to compare the timing.[11][12]S1063Brute Ratel C4Brute Ratel C4can callNtDelayExecutionto pause execution.[13][14]S1039BumblebeeBumblebeehas the ability to set a hardcoded and randomized sleep interval.[15]S0660ClamblingClamblingcan wait 30 minutes before initiating contact with C2.[16]S0611ClopClophas used thesleepcommand to avoid sandbox detection.[17]S0115CrimsonCrimsoncan determine when it has been installed on a host for at least 15 days before downloading the final payload.[18]S1066DarkTortillaDarkTortillacan implement thekernel32.dllSleep function to delay execution for up to 300 seconds before implementing persistence or processing an addon package.[19]S0694DRATzarusDRATzaruscan use theGetTickCountandGetSystemTimeAsFileTimeAPI calls to measure function timing.[20]DRATzaruscan also remotely shut down into sleep mode under specific conditions to evade detection.[20]S0554EgregorEgregorcan perform a  long sleep (greater than or equal to 3 minutes) to evade detection.[21]S0396EvilBunnyEvilBunnyhas used time measurements from 3 different APIs before and after performing sleep operations to check and abort if the malware is running in a sandbox.[22]S0512FatDukeFatDukecan turn itself on or off at random intervals.[23]S0493GoldenSpyGoldenSpy's installer has delayed installation ofGoldenSpyfor two hours after it reaches a victim system.[24]S0588GoldMaxGoldMaxhas set an execution trigger date and time, stored as an ASCII Unix/Epoch time value.[25]S0632GrimAgentGrimAgentcan sleep for 195 - 205 seconds after payload execution and before deleting its task.[26]S0561GuLoaderGuLoaderhas the ability to perform anti-debugging based on time checks, API calls, and CPUID.[27]S0697HermeticWiperHermeticWiperhas the ability to receive a command parameter to sleep prior to carrying out destructive actions on a targeted host.[28]S0513LiteDukeLiteDukecan wait 30 seconds before executing additional code if security software is detected.[23]S0447LokibotLokibothas performed a time-based anti-debug check before downloading its third stage.[29]S1059metaMainmetaMainhas delayed execution for five to six minutes during its persistence establishment process.[30]S0439OkrumOkrum's loader can detect presence of an emulator by using two calls to GetTickCount API, and checking whether the time has been accelerated.[31]C0022Operation Dream JobDuringOperation Dream Job,Lazarus Groupused tools that collectedGetTickCountandGetSystemTimeAsFileTimedata to detect sandbox or VMware services.[20]S0626P8RATP8RAThas the ability to "sleep" for a specified time to evade detection.[32]S0453PonyPonyhas delayed execution using a built-in function to avoid detection and analysis.[33]S0650QakBotTheQakBotdropper can delay dropping the payload to evade detection.[34][35]S0565RaindropAfter initial installation,Raindropruns a computation to delay execution.[36]S1018Saint BotSaint Bothas used the commandtimeout 20to pause the execution of its initial loader.[37]S1086Snip3Snip3can executeWScript.Sleepto delay execution of its second stage.[38]S0627SodaMasterSodaMasterhas the ability to put itself to "sleep" for a specified time.[32]S1034StrifeWaterStrifeWatercan modify its sleep time responses from the default of 20-22 seconds.[39]S0559SUNBURSTSUNBURSTremained dormant after initial access for a period of up to two weeks.[40]S1064SVCReadySVCReadycan enter a sleep stage for 30 minutes to evade detection.[41]S0595ThiefQuestThiefQuestinvokestimecall to check the system's time, executes asleepcommand, invokes a secondtimecall, and then compares the time difference between the twotimecalls and the amount of time the system slept to identify the sandbox.[42]S0671TomirisTomirishas the ability to sleep for at least nine minutes to evade sandbox-based analysis systems.[43]S0266TrickBotTrickBothas usedprintfand file I/O loops to delay process execution as part of API hammering.[5]S0386UrsnifUrsnifhas used a 30 minute delay after execution to evade sandbox monitoring tools.[44]S0689WhisperGateWhisperGatecan pause for 20 seconds to bypass antivirus solutions.[45][46]S0658XCSSETUsing the machine's local time,XCSSETwaits 43200 seconds (12 hours) from the initial creation timestamp of a specific file,.report. After the elapsed time,XCSSETexecutes additional modules.[47]MitigationsThis type of attack technique cannot be easily mitigated with preventive controls since
                                    it is based on the abuse of system features.DetectionIDData SourceData ComponentDetectsDS0017CommandCommand ExecutionMonitor executed commands and arguments that may employ various time-based methods to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required.DS0009ProcessOS API ExecutionMonitor for API calls that may employ various time-based methods to detect and avoid virtualization and analysis environments. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required.Process CreationTime-based evasion will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.ReferencesTorello, A. & Guibernau, F. (n.d.). Environment Awareness. Retrieved May 18, 2021.Loman, M. et al. (2021, July 4). Independence Day: REvil uses supply chain exploit to attack hundreds of businesses. Retrieved September 30, 2021.Malik, A. (2016, October 14). Nitol Botnet makes a resurgence with evasive sandbox analysis technique. Retrieved September 30, 2021.Joe Security. (2016, April 21). Nymaim - evading Sandboxes with API hammering. Retrieved September 30, 2021.Joe Security. (2020, July 13). TrickBot's new API-Hammering explained. Retrieved September 30, 2021.Kolbitsch, C. (2017, November 1). Evasive Malware Tricks: How Malware Evades Detection by Sandboxes. Retrieved March 30, 2021.Cybersecurity and Infrastructure Security Agency. (2021, February 21). AppleJeus: Analysis of North Korea’s Cryptocurrency Malware. Retrieved March 1, 2021.Accenture iDefense Unit. (2019, March 5). Mudcarp's Focus on Submarine Technologies. Retrieved August 24, 2021.Pantazopoulos, N. (2020, June 2). In-depth analysis of the new Team9 malware family. Retrieved December 1, 2020.Harbison, M. (2021, February 9). BendyBear: Novel Chinese Shellcode Linked With Cyber Espionage Group BlackTech. Retrieved February 16, 2021.Zykov, K. (2020, August 13). CactusPete APT group’s updated Bisonal backdoor. Retrieved May 5, 2021.Mercer, W., et al. (2020, March 5). Bisonal: 10 years of play. Retrieved January 26, 2022.Harbison, M. and Renals, P. (2022, July 5). When Pentest Tools Go Brutal: Red-Teaming Tool Being Abused by Malicious Actors. Retrieved February 1, 2023.Chell, D.  PART 3: How I Met Your Beacon – Brute Ratel. Retrieved February 6, 2023.Merriman, K. and Trouerbach, P. (2022, April 28). This isn't Optimus Prime's Bumblebee but it's Still Transforming. Retrieved August 22, 2022.Lunghi, D. et al. (2020, February). Uncovering DRBControl. Retrieved November 12, 2021.Santos, D. (2021, April 13). Threat Assessment: Clop Ransomware. Retrieved July 30, 2021.Huss, D. (2016, March 1). Operation Transparent Tribe. Retrieved June 8, 2016.Secureworks Counter Threat Unit Research Team. (2022, August 17). DarkTortilla Malware Analysis. Retrieved November 3, 2022.ClearSky Research Team. (2020, August 13). Operation 'Dream Job' Widespread North Korean Espionage Campaign. Retrieved December 20, 2021.Joe Security. (n.d.). Analysis Report fasm.dll. Retrieved January 6, 2021.Marschalek, M.. (2014, December 16). EvilBunny: Malware Instrumented By Lua. Retrieved June 28, 2019.Faou, M., Tartare, M., Dupuy, T. (2019, October). OPERATION GHOST. Retrieved September 23, 2020.Trustwave SpiderLabs. (2020, June 25). The Golden Tax Department and Emergence of GoldenSpy Malware. Retrieved July 23, 2020.Nafisi, R., Lelli, A. (2021, March 4). GoldMax, GoldFinder, and Sibot: Analyzing NOBELIUM’s layered persistence. Retrieved March 8, 2021.Priego, A. (2021, July). THE BROTHERS GRIM: THE REVERSING TALE OF GRIMAGENT MALWARE USED BY RYUK. Retrieved July 16, 2021.Salem, E. (2021, April 19). Dancing With Shellcodes: Cracking the latest version of Guloader. Retrieved July 7, 2021.Thomas, W. et al. (2022, February 25). CrowdStrike Falcon Protects from New Wiper Malware Used in Ukraine Cyberattacks. Retrieved March 25, 2022.Muhammad, I., Unterbrink, H.. (2021, January 6). A Deep Dive into Lokibot Infection Chain. Retrieved August 31, 2021.SentinelLabs. (2022, September 22). Metador Technical Appendix. Retrieved April 4, 2023.Hromcova, Z. (2019, July). OKRUM AND KETRICAN: AN OVERVIEW OF RECENT KE3CHANG GROUP ACTIVITY. Retrieved May 6, 2020.GREAT. (2021, March 30). APT10: sophisticated multi-layered loader Ecipekac discovered in A41APT campaign. Retrieved June 17, 2021.hasherezade. (2016, April 11). No money, but Pony! From a mail to a trojan horse. Retrieved May 21, 2020.Cyberint. (2021, May 25). Qakbot Banking Trojan. Retrieved September 27, 2021.Kuzmenko, A. et al. (2021, September 2). QakBot technical analysis. Retrieved September 27, 2021.Symantec Threat Hunter Team. (2021, January 18). Raindrop: New Malware Discovered in SolarWinds Investigation. Retrieved January 19, 2021.Unit 42. (2022, February 25). Spear Phishing Attacks Target Organizations in Ukraine, Payloads Include the Document Stealer OutSteel and the Downloader SaintBot. Retrieved June 9, 2022.Lorber, N. (2021, May 7). Revealing the Snip3 Crypter, a Highly Evasive RAT Loader. Retrieved September 13, 2023.Cybereason Nocturnus. (2022, February 1). StrifeWater RAT: Iranian APT Moses Staff Adds New Trojan to Ransomware Operations. Retrieved August 15, 2022.FireEye. (2020, December 13). Highly Evasive Attacker Leverages SolarWinds Supply Chain to Compromise Multiple Global Victims With SUNBURST Backdoor. Retrieved January 4, 2021.Schlapfer, Patrick. (2022, June 6). A New Loader Gets Ready. Retrieved December 13, 2022.Patrick Wardle. (2020, June 29). OSX.EvilQuest Uncovered part i: infection, persistence, and more!. Retrieved March 18, 2021.Kwiatkoswki, I. and Delcher, P. (2021, September 29). DarkHalo After SolarWinds: the Tomiris connection. Retrieved December 27, 2021.Caragay, R. (2014, December 11). Info-Stealing File Infector Hits US, UK. Retrieved June 5, 2019.S2W. (2022, January 18). Analysis of Destructive Malware (WhisperGate) targeting Ukraine. Retrieved March 14, 2022.Insikt Group. (2020, January 28). WhisperGate Malware Corrupts Computers in Ukraine. Retrieved March 31, 2023.Mac Threat Response, Mobile Research Team. (2020, August 13). The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits. Retrieved October 5, 2021.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.