MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseHide ArtifactsVBA StompingHide Artifacts:VBA StompingOther sub-techniques of Hide Artifacts (12)IDNameT1564.001Hidden Files and DirectoriesT1564.002Hidden UsersT1564.003Hidden WindowT1564.004NTFS File AttributesT1564.005Hidden File SystemT1564.006Run Virtual InstanceT1564.007VBA StompingT1564.008Email Hiding RulesT1564.009Resource ForkingT1564.010Process Argument SpoofingT1564.011Ignore Process InterruptsT1564.012File/Path ExclusionsAdversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.[1]MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has aPerformanceCachethat stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the_VBA_PROJECTstream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.[2][3]An adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the_VBA_PROJECTstream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.[4][1][5]ID:T1564.007Sub-technique of:T1564ⓘTactic:Defense EvasionⓘPlatforms:Linux, Windows, macOSⓘSystem Requirements:MS Office version specified in_VBA_PROJECTstream must match hostⓘPermissions Required:UserContributors:Rick Cole, MandiantVersion:1.1Created:17 September 2020Last Modified:15 October 2021Version PermalinkLive VersionMitigationsIDMitigationDescriptionM1042Disable or Remove Feature or ProgramTurn off or restrict access to unneeded VB components.[6]DetectionIDData SourceData ComponentDetectsDS0022FileFile MetadataIf the document is opened with a Graphical User Interface (GUI) the malicious p-code is decompiled and may be viewed. However, if thePROJECTstream, which specifies the project properties, is modified in a specific way the decompiled VBA code will not be displayed. For example, adding a module name that is undefined to thePROJECTstream will inhibit attempts of reading the VBA source code through the GUI.[1]DS0012ScriptScript ExecutionDetection efforts should be placed finding differences between VBA source code and p-code.[4]VBA code can be extracted from p-code before execution with tools such as the pcodedmp disassembler. The oletools toolkit leverages the pcodedmp disassembler to detect VBA stomping by comparing keywords present in the VBA source code and p-code.[5][7]ReferencesCole, R., Moore, A., Stark, G., Stancill, B. (2020, February 5). STOMP 2 DIS: Brilliance in the (Visual) Basics. Retrieved September 17, 2020.Hegt, S. (2019, May 5). Evil Clippy: MS Office maldoc assistant. Retrieved September 17, 2020.Microsoft. (2020, February 19). 2.3.4.1 _VBA_PROJECT Stream: Version Dependent Project Information. Retrieved September 18, 2020.Sayre, K., Ogden, H., Roberts, C. (2018, October 10). VBA Stomping — Advanced Maldoc Techniques. Retrieved September 17, 2020.Bontchev, V. (2019, July 30). pcodedmp.py - A VBA p-code disassembler. Retrieved September 17, 2020.Microsoft. (2020, January 23). How to turn off Visual Basic for Applications when you deploy Office. Retrieved September 17, 2020.decalage2. (2019, December 3). python-oletools. Retrieved September 18, 2020.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.