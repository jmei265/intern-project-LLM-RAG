MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesMobileProcess InjectionPtrace System CallsProcess Injection:Ptrace System CallsAdversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1]Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by usingmalloc) then invoking that memory withPTRACE_SETREGSto set the register containing the next instruction to execute. Ptrace system call injection can also be done withPTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).[1][2]Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.[3]Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.ID:T1631.001Sub-technique of:T1631Tactic Type:Post-Adversary Device AccessⓘTactics:Defense Evasion,Privilege EscalationⓘPlatforms:Android, iOSVersion:1.1Created:30 March 2022Last Modified:20 March 2023Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS0463INSOMNIAINSOMNIAgrants itself permissions by injecting its hash into the kernel’s trust cache.[4]S0424TriadaTriadainjects code into the Zygote process to effectively include itself in all forked processes. Additionally, code is injected into the Android Play Store App, web browser applications, and the system UI application.[5][6]S0494ZenZencan inject code into the Setup Wizard at runtime to extract CAPTCHA images.Zencan inject code into thelibcof running processes to infect them with the malware.[7]MitigationsThis type of attack technique cannot be easily mitigated with preventive controls since
                                    it is based on the abuse of system features.DetectionIDData SourceData ComponentDetectsDS0041Application VettingAPI CallsApplication vetting services could look for misuse of dynamic libraries.ReferencesKerrisk, M. (2020, February 9). PTRACE(2) - Linux Programmer's Manual. Retrieved February 21, 2020.Jain, S. (2018, July 25). Code injection in running process using ptrace. Retrieved February 21, 2020.Colgan, T. (2015, August 15). Linux-Inject. Retrieved February 21, 2020.I. Beer. (2019, August 29). Implant Teardown. Retrieved June 2, 2020.Lukasz Siewierski. (2019, June 6). PHA Family Highlights: Triada. Retrieved July 16, 2019.Snow, J. (2016, March 3). Triada: organized crime on Android. Retrieved July 16, 2019.Siewierski, L. (2019, January 11). PHA Family Highlights: Zen and its cousins . Retrieved July 27, 2020.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.