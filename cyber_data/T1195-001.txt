MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseSupply Chain CompromiseCompromise Software Dependencies and Development ToolsSupply Chain Compromise:Compromise Software Dependencies and Development ToolsOther sub-techniques of Supply Chain Compromise (3)IDNameT1195.001Compromise Software Dependencies and Development ToolsT1195.002Compromise Software Supply ChainT1195.003Compromise Hardware Supply ChainAdversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.[1]Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.ID:T1195.001Sub-technique of:T1195ⓘTactic:Initial AccessⓘPlatforms:Linux, Windows, macOSVersion:1.2Created:11 March 2020Last Modified:13 April 2024Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS0658XCSSETXCSSETadds malicious code to a host's Xcode projects by enumerating CocoaPodstarget_integrator.rbfiles under the/Library/Ruby/Gemsfolder or enumerates all.xcodeprojfolders under a given directory.XCSSETthen downloads a script and Mach-O file into the Xcode project folder.[2]MitigationsIDMitigationDescriptionM1013Application Developer GuidanceApplication developers should be cautious when selecting third-party libraries to integrate into their application. Additionally, where possible, developers should lock software dependencies to specific versions rather than pulling the latest version on build.[3]M1033Limit Software InstallationWhere possible, consider requiring developers to pull from internal repositories containing verified and approved packages rather than from external ones.[3]M1051Update SoftwareA patch management process should be implemented to check unused dependencies, unmaintained and/or previously vulnerable dependencies, unnecessary features, components, files, and documentation.M1016Vulnerability ScanningContinuous monitoring of vulnerability sources and the use of automatic and manual code review tools should also be implemented as well.[4]DetectionIDData SourceData ComponentDetectsDS0022FileFile MetadataUse verification of distributed binaries through hash checking or other integrity checking mechanisms. Scan downloads for malicious signatures and attempt to test software and updates prior to deployment while taking note of potential suspicious activity.ReferencesTrendmicro. (2018, November 29). Hacker Infects Node.js Package to Steal from Bitcoin Wallets. Retrieved April 10, 2019.Mac Threat Response, Mobile Research Team. (2020, August 13). The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits. Retrieved October 5, 2021.Daniel Krivelevich and Omer Gil. (n.d.). Top 10 CI/CD Security Risks. Retrieved March 24, 2024.OWASP. (2018, February 23). OWASP Top Ten Project. Retrieved April 3, 2018.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.