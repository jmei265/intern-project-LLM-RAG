MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesMobileNative APINative APIAdversaries may use Android’s Native Development Kit (NDK) to write native functions that can achieve execution of binaries or functions. Like system calls on a traditional desktop operating system, native code achieves execution on a lower level than normal Android SDK calls.The NDK allows developers to write native code in C or C++ that is compiled directly to machine code, avoiding all intermediate languages and steps in compilation that higher level languages, like Java, typically have. The Java Native Interface (JNI) is the component that allows Java functions in the Android app to call functions in a native library.[1]Adversaries may also choose to use native functions to execute malicious code since native actions are typically much more difficult to analyze than standard, non-native behaviors.[2]ID:T1575Sub-techniques:No sub-techniquesTactic Type:Post-Adversary Device AccessⓘTactics:Defense Evasion,ExecutionⓘPlatforms:AndroidVersion:2.0Created:28 April 2020Last Modified:08 April 2022Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS0540AsacubAsacubhas implemented functions in native code.[3]S0432BreadBreadhas used native code in an attempt to disguise malicious functionality.[4]S0529CarbonStealCarbonStealhas seen native libraries used in some reported samples[5]S0555CHEMISTGAMESCHEMISTGAMEShas utilized native code to decrypt its malicious payload.[6]S0544HenBoxHenBoxhas contained native libraries.[7]S0545TERRACOTTATERRACOTTAhas included native modules.[8]MitigationsThis type of attack technique cannot be easily mitigated with preventive controls since
                                    it is based on the abuse of system features.DetectionThis is abuse of standard OS-level APIs and are therefore typically undetectable to the end user.ReferencesGoogle. (2019, December 27). Getting Started with the NDK. Retrieved April 28, 2020.M. Peck, C. Northern. (2016, August 22). Analyzing the Effectiveness of App Vetting Tools in the Enterprise. Retrieved April 28, 2020.T. Shishkova. (2018, August 28).  The rise of mobile banker Asacub. Retrieved December 14, 2020.A. Guertin, V. Kotov, Android Security & Privacy Team. (2020, January 9). PHA Family Highlights: Bread (and Friends) . Retrieved April 27, 2020.A. Kumar, K. Del Rosso, J. Albrecht, C. Hebeisen. (2020, June 1). Mobile APT Surveillance Campaigns Targeting Uyghurs - A collection of long-running Android tooling connected to a Chinese mAPT actor. Retrieved November 10, 2020.B. Leonard, N. Mehta. (2019, November 21). The Secret Life of Sandworms. Retrieved December 31, 2020.A. Hinchliffe, M. Harbison, J. Miller-Osborn, et al. (2018, March 13). HenBox: The Chickens Come Home to Roost. Retrieved September 9, 2019.Satori Threat Intelligence and Research Team. (2020, August). TERRACOTTA Android Malware: A Technical Study. Retrieved December 18, 2020.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.