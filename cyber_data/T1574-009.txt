MatricesEnterpriseMobileICSTacticsEnterpriseMobileICSTechniquesEnterpriseMobileICSDefensesData SourcesMitigationsEnterpriseMobileICSAssetsCTIGroupsSoftwareCampaignsResourcesGet StartedLearn More about ATT&CKATT&CKconATT&CK Data & ToolsFAQEngage with ATT&CKVersion HistoryLegal & BrandingBenefactorsBlogSearchATT&CKcon 5.0 returns October 22-23, 2024 in McLean, VA.Register heretoday!HomeTechniquesEnterpriseHijack Execution FlowPath Interception by Unquoted PathHijack Execution Flow:Path Interception by Unquoted PathOther sub-techniques of Hijack Execution Flow (13)IDNameT1574.001DLL Search Order HijackingT1574.002DLL Side-LoadingT1574.004Dylib HijackingT1574.005Executable Installer File Permissions WeaknessT1574.006Dynamic Linker HijackingT1574.007Path Interception by PATH Environment VariableT1574.008Path Interception by Search Order HijackingT1574.009Path Interception by Unquoted PathT1574.010Services File Permissions WeaknessT1574.011Services Registry Permissions WeaknessT1574.012COR_PROFILERT1574.013KernelCallbackTableT1574.014AppDomainManagerAdversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.Service paths[1]and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g.,C:\unsafe path with space\program.exevs."C:\safe path with space\program.exe").[2](stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut isC:\program files\myapp.exe, an adversary may create a program atC:\program.exethat will be run instead of the intended program.[3][4]This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.ID:T1574.009Sub-technique of:T1574ⓘTactics:Persistence,Privilege Escalation,Defense EvasionⓘPlatforms:WindowsContributors:Stefan KanthakVersion:1.1Created:13 March 2020Last Modified:30 March 2023Version PermalinkLive VersionProcedure ExamplesIDNameDescriptionS0363EmpireEmpirecontains modules that can discover and exploit unquoted path vulnerabilities.[5]S0194PowerSploitPowerSploitcontains a collection of Privesc-PowerUp modules that can discover and exploit unquoted path vulnerabilities.[6][7]MitigationsIDMitigationDescriptionM1047AuditFind and eliminate path interception weaknesses in program configuration files, scripts, the PATH environment variable, services, and in shortcuts by surrounding PATH variables with quotation marks when functions allow for them. Be aware of the search order Windows uses for executing or loading binaries and use fully qualified paths wherever appropriate.Clean up old Windows Registry keys when software is uninstalled to avoid keys with no associated legitimate binaries. Periodically search for and correct or report path interception weaknesses on systems that may have been introduced using custom or available tools that report software using insecure path configurations.[8][9][10]M1038Execution PreventionAdversaries will likely need to place new binaries in locations to be executed through this weakness. Identify and block potentially malicious software executed path interception by using application control tools, like Windows Defender Application Control, AppLocker, or Software Restriction Policies where appropriate.[11][12][13][14][15][16]M1022Restrict File and Directory PermissionsEnsure that proper permissions and directory access control are set to deny users the ability to write files to the top-level directoryC:and system directories, such asC:\Windows\, to reduce places where malicious files could be placed for execution. Require that all executables be placed in write-protected directories.DetectionIDData SourceData ComponentDetectsDS0022FileFile CreationMonitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Also, monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as "findstr," "net," and "python"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.File ModificationMonitor for changes made to files that may execute their own malicious payloads by hijacking vulnerable file path references.DS0009ProcessProcess CreationMonitor for newly executed processes that may execute their own malicious payloads by hijacking vulnerable file path references.ReferencesMicrosoft. (2017, April 20). HKLM\SYSTEM\CurrentControlSet\Services Registry Tree. Retrieved March 16, 2020.Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.Schroeder, W., Warner, J., Nelson, M. (n.d.). Github PowerShellEmpire. Retrieved April 28, 2016.PowerShellMafia. (2012, May 26). PowerSploit - A PowerShell Post-Exploitation Framework. Retrieved February 6, 2018.PowerSploit. (n.d.). PowerSploit. Retrieved February 6, 2018.Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.Microsoft. (n.d.). Dynamic-Link Library Security. Retrieved July 25, 2016.Kanthak, S.. (2016, July 20). Vulnerability and Exploit Detector. Retrieved February 3, 2017.Beechey, J.. (2014, November 18). Application Whitelisting:  Panacea or Propaganda?. Retrieved November 18, 2014.Gorzelany, A., Hall, J., Poggemeyer, L.. (2019, January 7). Windows Defender Application Control. Retrieved July 16, 2019.Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.NSA Information Assurance Directorate. (2014, August). Application Whitelisting Using Microsoft AppLocker. Retrieved March 31, 2016.Corio, C., & Sayana, D. P.. (2008, June). Application Lockdown with Software Restriction Policies. Retrieved November 18, 2014.Microsoft. (2012, June 27). Using Software Restriction Policies and AppLocker Policies. Retrieved April 7, 2016.×load more resultsContact UsTerms of UsePrivacy PolicyWebsite Changelog© 2015 - 2024, The MITRE Corporation. MITRE ATT&CK and ATT&CK are registered trademarks of The MITRE Corporation.